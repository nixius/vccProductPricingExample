@using System.Net.Http.Json
@using MudBlazor
@using VCC.ProductPricingApiTest.Models.Api
@using VCC.ProductPricingApiTest.Web.Components.Dialogs
@using VCC.ProductPricingApiTest.Web.ViewModel

@inject HttpClient Http
@inject IDialogService Dialog
@inject ISnackbar Snackbar

<h3>ProductList</h3>

<MudTable Items="_products" Loading="@_loading" Hover="true" Dense="true" Bordered="true" Elevation="0">
    <ToolBarContent>
        <MudText Typo="Typo.subtitle2" Class="ml-2">Total: @_products.Count()</MudText>
        <MudSpacer />
    </ToolBarContent>

    <HeaderContent>
        <MudTh style="width:20%">Product</MudTh>
        <MudTh Class="text-right" style="width:10%">Original Price</MudTh>
        <MudTh Class="text-right" style="width:10%">Discount Price</MudTh>
        <MudTh style="width:12%">Last Updated (UTC)</MudTh>
        <MudTh Class="text-right">Actions</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Product">@context.ProductName</MudTd>
        <MudTd DataLabel="Current Price" Class="text-right">
            @context.OriginalPrice.ToString("C")
        </MudTd>
        <MudTd DataLabel="Discounted Price" Class="text-right">
            @if (context.DiscountPrice.HasValue && 
                 context.DiscountPrice.Value > 0.0m &&
                 context.DiscountPrice != context.OriginalPrice)
            {
                @context.DiscountPrice.Value.ToString("C")
            }
        </MudTd>
        <MudTd DataLabel="Last Updated">
            <MudText>@context.LastUpdated.ToString("yyyy-MM-dd HH:mm:ss")</MudText>
        </MudTd>

        <MudTd DataLabel="Actions" Class="text-right">
            <ProductValueAction ProductId="@context.ProductId"
                                Tooltip="Update base price"
                                Icon="@Icons.Material.Filled.PriceChange"
                                Color="Color.Secondary"
                                InputLabel="New price"
                                AdornmentText="£"
                                SubmitText="Save"
                                OnSubmit="UpdatePriceAsync" />

            <ProductValueAction ProductId="@context.ProductId"
                                Tooltip="Add discount"
                                Icon="@Icons.Material.Filled.LocalOffer"
                                Color="Color.Secondary"
                                InputLabel="Discount (%)"
                                AdornmentText="%"
                                SubmitText="Apply"
                                OnSubmit="AddDiscountAsync" />

            <MudButton Class="ml-2" Size="Size.Small" Color="Color.Info"
                       OnClick="@(() => OpenHistoryDialog(context))">
                History
            </MudButton>
        </MudTd>
    </RowTemplate>

    <NoRecordsContent>
        <MudText Class="pa-4">No products found.</MudText>
    </NoRecordsContent>
</MudTable>

@code {
    private bool _loading;
    private List<ProductViewModel> _products = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadProductsAsync();
    }

    private async Task LoadProductsAsync()
    {
        try
        {
            _loading = true;
            var products = await Http.GetFromJsonAsync<List<ApiProduct>>("/api/products") ?? new();

            products.ForEach(p =>
            {
                _products.Add(new ProductViewModel()
                {
                    ProductId = p.Id,
                    OriginalPrice = p.OriginalPrice,
                    DiscountPrice = p.CurrentPrice,
                    ProductName = p.Name,
                    LastUpdated = p.LastUpdatedUtc
                });
            });
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load products: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task UpdatePriceAsync(int productId, decimal newPrice)
    {
        var res = await Http.PutAsJsonAsync($"/api/products/{productId}/update-price", new UpdateProductPriceRequest()
        {
            NewPrice = newPrice
        });
        if (!res.IsSuccessStatusCode)
        {
            Snackbar.Add("An error occured updating the price.", Severity.Error);
            return;
        }
        var resData = await res.Content.ReadFromJsonAsync<UpdateProductPriceResponse>();

        var prod = _products.FirstOrDefault(p => p.ProductId == resData.Id);
        if (prod == null)
        {
            // What has happened here? reload
            await LoadProductsAsync();
        }
        else
        {
            prod.OriginalPrice = resData.OriginalPrice;
            prod.DiscountPrice = resData.NewPrice;
            StateHasChanged();
        }

        Snackbar.Add("Discount applied.", Severity.Success);
    }

    private async Task AddDiscountAsync(int productId, decimal percent)
    {
        var res = await Http.PostAsJsonAsync($"/api/products/{productId}/apply-discount", new ApplyProductDiscountRequest()
        {
            DiscountPercentage = percent
        });

        if (!res.IsSuccessStatusCode)
        {
            Snackbar.Add("An error occured applying a Discount.", Severity.Error);
            return;
        }

        var resData = await res.Content.ReadFromJsonAsync<ApplyProductDiscountResponse>();

        var prod = _products.FirstOrDefault(p => p.ProductId == resData.Id);
        if (prod == null)
        {
            // What has happened here? reload
            await LoadProductsAsync();
        }
        else
        {
            prod.OriginalPrice = resData.OriginalPrice;
            prod.DiscountPrice = resData.DiscountedPrice;
            StateHasChanged();

        }

        Snackbar.Add("Discount applied.", Severity.Success);
    }

    private async Task OpenHistoryDialog(ProductViewModel product)
    {
        var parameters = new DialogParameters<HistoryDialog>
        {
            { x => x.ProductId, product.ProductId },
            { x => x.ProductName, product.ProductName }
        };

        await Dialog.ShowAsync<HistoryDialog>($"Price Change History — [{product.ProductName}]",
            parameters,
            new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true });
    }

}