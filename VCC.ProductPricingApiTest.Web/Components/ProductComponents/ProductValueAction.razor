@using MudBlazor
@inject ISnackbar Snackbar


<MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center">
    <MudTextField @bind-Value="_value"
                  T="decimal?"
                  InputType="InputType.Number"
                  Variant="Variant.Text"
                  Disabled="_busy"
                  Adornment="@(string.IsNullOrWhiteSpace(AdornmentText) ? Adornment.None : Adornment.Start)"
                  AdornmentText="@AdornmentText"
                  Immediate="true"
                  Class=""
                  Style="width:110px" />

    <MudButton ButtonType="ButtonType.Button"
               Size="Size.Small"
               Color="@Color"
               Variant="Variant.Filled"
               Disabled="@(!_value.HasValue || _busy || OnSubmit is null)"
               Class=""
               OnClick="@SubmitAsync">
        @SubmitText
    </MudButton>
</MudStack>

@code {
    [Parameter] public int ProductId { get; set; }
    [Parameter] public string Tooltip { get; set; } = "";
    [Parameter] public string Icon { get; set; } = Icons.Material.Filled.Edit;
    [Parameter] public Color Color { get; set; } = Color.Primary;

    [Parameter] public string InputLabel { get; set; } = "Value";
    [Parameter] public string? AdornmentText { get; set; } // prefix lil characters such as "£" or "%"

    [Parameter] public Func<int, decimal, Task>? OnSubmit { get; set; }
    [Parameter] public string SubmitText { get; set; } = "Submit";

    private decimal? _value;
    private bool _busy = false;

    private async Task SubmitAsync()
    {
        if (!_value.HasValue || OnSubmit == null) 
            return;

        try
        {
            _busy = true;
            await OnSubmit.Invoke(ProductId, _value.Value);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            _busy = false;
            _value = null;
        }
    }
}
